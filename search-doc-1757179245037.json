{"searchDocs":[{"title":"Zone","type":0,"sectionRef":"#","url":"/QuickBounds/api/Zone","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#properties","content":" ","version":null,"tagName":"h2"},{"title":"part​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#part","content":"&lt;/&gt; Zone.part: BaseClass? If available, the BasePart associated with the zone object.  ","version":null,"tagName":"h3"},{"title":"index​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#index","content":"&lt;/&gt; Zone.index: number Used for internal data structures. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#functions","content":" ","version":null,"tagName":"h2"},{"title":"watchGroups​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#watchGroups","content":"&lt;/&gt; Zone:watchGroups(...: ...Group) → () Start watching the specified groups.  ","version":null,"tagName":"h3"},{"title":"unwatchGroups​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#unwatchGroups","content":"&lt;/&gt; Zone:unwatchGroups(...: ...Group) → () Stop watching the specified groups.  ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"Zone","url":"/QuickBounds/api/Zone#destroy","content":"&lt;/&gt; Zone:destroy() → ()  ","version":null,"tagName":"h3"},{"title":"Addons","type":0,"sectionRef":"#","url":"/QuickBounds/docs/addons","content":"","keywords":"","version":"Next"},{"title":"Player Addon​","type":1,"pageTitle":"Addons","url":"/QuickBounds/docs/addons#player-addon","content":" This addon abstracts management of the player character away so that it's more comfortable to work with players.  It exposes a function to add players to groups and a function to remove players from groups.  Basic usage looks like this:  local exampleGroup = QuickBounds.createGroup() local zone = QuickBounds.createZoneFromInstance(workspace.ExampleZone) zone:watchGroups(exampleGroup) game.Players.PlayerAdded:Connect(function(player) PlayerAddon.addPlayerToGroups(player, exampleGroup) end) exampleGroup:onEntered(function(rootPart, zone, player: Player) print(player, &quot;entered zone&quot;, zone.part) end) exampleGroup:onExited(function(rootPart, zone, player: Player) print(player, &quot;exited zone&quot;, zone.part) end)   Cleanup when players leave is done automatically, so you don't need to manually remove the player from all groups when the player leaves.  If you want to use this addon with StreamingEnabled on the Client then you have to set the player characters to Persistent on the server. ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/QuickBounds/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Intro","url":"/QuickBounds/docs/intro#overview","content":" QuickBounds is a spatial detection module to track BaseParts moving in and out of predefined areas in the world. It uses a Bounding Volume Hierarchy under the hood to minimize the costs of tracking these BaseParts.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Intro","url":"/QuickBounds/docs/intro#installation","content":" For both pesde and wally, the package name + version is  unityjaeger/quickbounds@0.3.0   Or if you want the source, then just grab it from the latest release from the Releases tab.  ","version":"Next","tagName":"h2"},{"title":"Quick Start​","type":1,"pageTitle":"Intro","url":"/QuickBounds/docs/intro#quick-start","content":" --create a group (optionally with a priority) local group = QuickBounds.createGroup(10) --lower priority groups get prioritized --add a basepart to the group to be tracked (optionally with custom data) group:add(workspace.ExamplePart, &quot;custom data&quot;) --create a zone local zone = QuickBounds.createZoneFromInstance(workspace.ExampleZonePart) --make the zone start watching the example group zone:watchGroups(group) --register callbacks for zone entering/exiting group:onEntered(function(part, zone, customData) --if the zone was registered with createZoneFromInstance then zone.part will be the Instance passed to that function, otherwise it will be nil print(part, &quot;entered&quot;, zone.part, &quot;with custom data&quot;, customData) end) group:onExited(function(part, zone, customData) --if the zone was registered with createZoneFromInstance then zone.part will be the Instance passed to that function, otherwise it will be nil print(part, &quot;exited&quot;, zone.part, &quot;with custom data&quot;, customData) end)  ","version":"Next","tagName":"h2"},{"title":"QuickBounds","type":0,"sectionRef":"#","url":"/QuickBounds/api/QuickBounds","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#functions","content":" ","version":null,"tagName":"h2"},{"title":"createZone​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#createZone","content":"&lt;/&gt; QuickBounds.createZone( cframe: CFrame , size: Size, shape: &quot;Block&quot; | &quot;Ball&quot; | &quot;Cylinder&quot; | &quot;Wedge&quot; ) → Zone   ","version":null,"tagName":"h3"},{"title":"createZoneFromInstance​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#createZoneFromInstance","content":"&lt;/&gt; QuickBounds.createZoneFromInstance(part: BasePart ) → Zone Creates and returns a Zone built from an instance, does not support Corner Wedges.  ","version":null,"tagName":"h3"},{"title":"setFrameBudget​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#setFrameBudget","content":"&lt;/&gt; QuickBounds.setFrameBudget(budget: number) → () Sets the frame budget available for each processing frame, in seconds.  ","version":null,"tagName":"h3"},{"title":"createGroup​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#createGroup","content":"&lt;/&gt; QuickBounds.createGroup(priority: number?) → Group Creates and returns a group, with an optionally specified priority. Default priority is 1e6 (100'000).  ","version":null,"tagName":"h3"},{"title":"isPartInGroup​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#isPartInGroup","content":"&lt;/&gt; QuickBounds.isPartInGroup( part: BasePart , group: Group ) → boolean Checks if the BasePart is member of the group, not if it's currently physically inside of the group.  ","version":null,"tagName":"h3"},{"title":"getPartsForGroup​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#getPartsForGroup","content":"&lt;/&gt; QuickBounds.getPartsForGroup(group: Group) → {BasePart } Returns all parts that are a member of the group.  ","version":null,"tagName":"h3"},{"title":"getGroupsForPart​","type":1,"pageTitle":"QuickBounds","url":"/QuickBounds/api/QuickBounds#getGroupsForPart","content":"&lt;/&gt; QuickBounds.getGroupsForPart(part: BasePart ) → {Group} Returns all groups that the BasePart is a member of. ","version":null,"tagName":"h3"},{"title":"Group","type":0,"sectionRef":"#","url":"/QuickBounds/api/Group","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#properties","content":" ","version":null,"tagName":"h2"},{"title":"UID​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#UID","content":"&lt;/&gt; Group.UID: number Unique identifier for this group. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#functions","content":" ","version":null,"tagName":"h2"},{"title":"add​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#add","content":"&lt;/&gt; Group:add( part: BasePart , customData: any? ) → () Start tracking the specified BasePart.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#remove","content":"&lt;/&gt; Group:remove(part: BasePart ) → () Makes the group stop tracking the specified BasePart.  ","version":null,"tagName":"h3"},{"title":"setPriority​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#setPriority","content":"&lt;/&gt; Group:setPriority(priority: number) → () Groups with the same priority can be entered by a BasePart that is a member of both groups simultaneously. If the groups have a different priority then the one with a lower priority will win.  ","version":null,"tagName":"h3"},{"title":"onEntered​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#onEntered","content":"&lt;/&gt; Group:onEntered(callback: ( part: BasePart , zone: Zone, customData: any? ) → ()) → () → () Tracks whenever a BasePart that is a member of this group enters this group through a Zone with the use of a callback function, returns a cleanup function.  ","version":null,"tagName":"h3"},{"title":"onExited​","type":1,"pageTitle":"Group","url":"/QuickBounds/api/Group#onExited","content":"&lt;/&gt; Group:onExited(callback: ( part: BasePart , zone: Zone, customData: any? ) → ()) → () → () Tracks whenever a BasePart that is a member of this group exits this group through a Zone with the use of a callback function, returns a cleanup function. ","version":null,"tagName":"h3"},{"title":"Usage","type":0,"sectionRef":"#","url":"/QuickBounds/docs/usage","content":"","keywords":"","version":"Next"},{"title":"Zones​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#zones","content":" ","version":"Next","tagName":"h2"},{"title":"Understanding Zones​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#understanding-zones","content":" Think of a zone as an invisible boundary that defines a spatial area of interest. A zone has mathematical boundaries that define where it begins and ends, as well as a shape. Zones can overlap, intersect and exist in the same space without conflicting with each other.  A zone is just simple geometry, it knows it's own shape, size and cframe. You can create a zone in one of two ways: Either by manually passing the cframe, size and shape or by creating the zone based on an instance. Every Roblox BasePart shape but Half Wedge is supported.  ","version":"Next","tagName":"h3"},{"title":"Creation​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#creation","content":" --example of manual zone creation QuickBounds.createZone( CFrame.new(0, 5, 0), Vector3.new(10, 10, 10), &quot;Box&quot; )   --example of zone creation from an instance QuickBounds.createZoneFromInstance(workspace.ZonePart)   What's important to remember is that zones are purely geometric and that they can be used by multiple groups simultaneously if wanted.  If at any point you want to destroy a zone, you can simply call  zone:destroy()   ","version":"Next","tagName":"h3"},{"title":"Watching Groups​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#watching-groups","content":" To start tracking groups you have to tell the zone to watch the groups.  local zone = QuickBounds.createZoneFromInstance(workspace.ZonePart) zone:watchGroups(ExampleGroup1, ExampleGroup2)   You can also tell a zone to stop watching groups.  zone:unwatchGroups(ExampleGroup1)   This will be elaborated on further in the next section  ","version":"Next","tagName":"h3"},{"title":"Groups​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#groups","content":" ","version":"Next","tagName":"h2"},{"title":"Understanding Groups​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#understanding-groups","content":" You can think of a group as an observer that watches zones and reacts when objects enter or leave said zones. Each group should ideally embody a particular aspect of your game logic - for example a safezone, quest triggers, traps and so on.  The relationship between zones and groups is many to many, meaning any number of zones can watch any number of groups. When a zone starts watching a group, the group will be notified if any of its associated BaseParts enter this zone.  ","version":"Next","tagName":"h3"},{"title":"Creation and Priority​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#creation-and-priority","content":" To get a group working, you first need to create a group like so:  QuickBounds.createGroup(10)   When creating a group you can pass a number parameter that is the priority of the group, the lower the priority of a group the higher the actual priority, it sounds confusing but this is due to an optimization (not needing to pass a function to table.sort during priority resolution, for those who care). So groups with a lower priority value get prioritized over groups with a higher priority value, groups at the same priority can coexist without interferring with one another.  The above snippet is equivalent to this:  local group = QuickBounds.createGroup() group:setPriority(10)   When no priority is passed during group creation, it defaults to 100'000.    ","version":"Next","tagName":"h3"},{"title":"Adding and Removing Parts​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#adding-and-removing-parts","content":" If you want a group to start tracking a specific BasePart then you can do the following:  local group = QuickBounds.createGroup() group:add(workspace.ExamplePart, &quot;Custom Data&quot;) task.wait(5) group:remove(workspace.ExamplePart)   This will register the BasePart with the group, if you want it to be a part of more groups then you have to register it with each group.  There is also an optional second parameter for add that attaches custom data to a BasePart.  In this example it will also remove the BasePart from the group after 5 seconds.  ","version":"Next","tagName":"h3"},{"title":"Tracking Entry/Exit​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#tracking-entryexit","content":" To track entry/exit to a group you can do the following:  local group = QuickBounds.createGroup() group:onEntered(function(part: BasePart, zone: QuickBounds.Zone, customData: any?) print(part, &quot;entered this group&quot;) end) group:onExited(function(part: BasePart, zone: QuickBounds.Zone, customData: any?) print(part, &quot;exited this group&quot;) end)   There is no limit to the callbacks that can be registered for a group.  The first parameter for the callback is the BasePart that interacted with the group, while the second is the specific zone object that the BasePart has entered. If the zone was created via createZoneFromInstance then it will also have a &quot;part&quot; field that can be accessed. The third parameter is the custom data that may or may not have been specified while adding a BasePart to the group, if you want a practical example of custom data in use then check out the Player Addon under the Addons tab.  Both onEntered and onExited return a cleanup function to remove the callback.  ","version":"Next","tagName":"h3"},{"title":"Considerations​","type":1,"pageTitle":"Usage","url":"/QuickBounds/docs/usage#considerations","content":" only the positions of BaseParts are tracked and their size not included for calculations, this means only the center of the BasePart can trigger Entry/Exit, make sure to keep this in mind when working with small zones or big BaseParts ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}