{"searchDocs":[{"title":"Zone","type":0,"sectionRef":"#","url":"/Zoner/api/Zone","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#functions","content":" ","version":null,"tagName":"h2"},{"title":"remove​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#remove","content":"&lt;/&gt; Zone:remove() → () Removes the Zone from the BVH, requires a rebuild for the effect to show.  ","version":null,"tagName":"h3"},{"title":"watchGroups​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#watchGroups","content":"&lt;/&gt; Zone:watchGroups(...: Groups) → () zone:watchGroups(&quot;Players&quot;, &quot;NPCs&quot;, &quot;Vehicles&quot;)   ","version":null,"tagName":"h3"},{"title":"unwatchGroups​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#unwatchGroups","content":"&lt;/&gt; Zone:unwatchGroups(...: Groups) → () zone:unwatchGroups(&quot;Vehicles&quot;)  ","version":null,"tagName":"h3"},{"title":"Intro","type":0,"sectionRef":"#","url":"/Zoner/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Intro","url":"/Zoner/docs/intro#overview","content":" Zoner is a spatial partitioning system for Roblox that efficiently detects when objects enter or exit defined zones. It uses a Bounding Volume Hierarchy with Morton Codes for optimized spatial queries, making it suitable for large-scale applications.  ","version":"Next","tagName":"h2"},{"title":"Quick Start​","type":1,"pageTitle":"Intro","url":"/Zoner/docs/intro#quick-start","content":" local Zoner = require(path.to.Zoner) --create a zone local zone = Zoner.addFromInstance(workspace.MyZonePart) zone.watchGroups(&quot;Players&quot;) --make this zone watch any object with the &quot;Players&quot; group Zoner.onEntered(&quot;Players&quot;, function(player) print(player.Name .. &quot; entered the zone!&quot;) end) Zoner.onExited(&quot;Players&quot;, function(player) print(player.Name .. &quot; exited the zone!&quot;) end) --rebuild the BVH tree, needed after structural changes Zoner.rebuild()  ","version":"Next","tagName":"h2"},{"title":"Usage","type":0,"sectionRef":"#","url":"/Zoner/docs/Usage","content":"","keywords":"","version":"Next"},{"title":"Creating a Zone​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#creating-a-zone","content":" Zones can be created in two ways, either using addFromInstance or just add, addFromInstance gets the shape of the Instance passed to the function and calls add behind the scenes.  local cubeZone = zoner.add(CFrame.new(0, 10, 0), Vector3.new(10, 10, 10), &quot;Cube&quot;) local sphereZone = zoner.addFromInstance(workspace.SphereZone)   ","version":"Next","tagName":"h2"},{"title":"Managing Objects​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#managing-objects","content":" Objects can be added with assignToGroup.  zoner.assignToGroup(&quot;Example&quot;, workspace.Part)   The objects added this way automatically get cleaned up when the object is destroyed, however you can still manually remove an object from a group.  zoner.removeFromGroup(&quot;Example&quot;, workspace.Part)   Objects can also be part of multiple groups, which just requires additional calls to the assignToGroup function. assignToGroup also has an optional third parameter that lets you define a custom value to return in the callback function for onEntered and onExited. This is mainly so that associating data with parts is easier without having to maintain custom data structures.  zoner.assignToGroup(&quot;Example&quot;, workspace.Part, &quot;Value&quot;) --the second parameter in the callback function will now be &quot;Value&quot; for this part   ","version":"Next","tagName":"h2"},{"title":"Detecting Zone Entry/Exit​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#detecting-zone-entryexit","content":" onEntered and onExited allow you to define any number of callbacks to listen to objects moving in or out of a zone.  zoner.onEntered(&quot;Example&quot;, function(part, customData) print(part, &quot;entered zone, with data&quot;, customData) --if we take the object defined above, this will print &quot;Part entered zone, with data Value&quot; end) zoner.onExited(&quot;Example&quot;, function(part) print(part, &quot;exited zone&quot;) end)   ","version":"Next","tagName":"h2"},{"title":"Additional Information​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#additional-information","content":" Only having one Zone per tag is completely fine.This module can handle querying a lot of zones, but it is always a trade off if you want optimal performance, either a lot of objects or a lot of zones.There is a predefined &quot;Players&quot; group that gets handled by the module. ","version":"Next","tagName":"h2"},{"title":"Zoner","type":0,"sectionRef":"#","url":"/Zoner/api/Zoner","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#types","content":" ","version":null,"tagName":"h2"},{"title":"Groups​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#Groups","content":"&lt;/&gt; type Groups = &quot;Players&quot; | string  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#functions","content":" ","version":null,"tagName":"h2"},{"title":"add​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#add","content":"&lt;/&gt; Zoner.add( cframe: CFrame , size: Vector3 , shape: &quot;Cube&quot; | &quot;Cylinder&quot; | &quot;Sphere&quot; ) → Zone Requires a rebuild for the zone to start working as intended.  ","version":null,"tagName":"h3"},{"title":"addFromInstance​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#addFromInstance","content":"&lt;/&gt; Zoner.addFromInstance(part: BasePart ) → Zone Requires a rebuild for the zone to start working as intended.  ","version":null,"tagName":"h3"},{"title":"rebuild​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#rebuild","content":"&lt;/&gt; Zoner.rebuild() → () Reconstructs the BVH based on the current zones, this is required after any structural change.  ","version":null,"tagName":"h3"},{"title":"assignToGroup​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#assignToGroup","content":"&lt;/&gt; Zoner.assignToGroup( group: string, part: BasePart , callbackOverwrite: any?-- optional data to pass to callbacks instead of the part itself ) → () Associates a BasePart with a group.  ","version":null,"tagName":"h3"},{"title":"removeFromGroup​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#removeFromGroup","content":"&lt;/&gt; Zoner.removeFromGroup( group: string, part: BasePart ) → () Removes a BasePart from a group, if the BasePart is not a member of any group after this operation, it gets cleaned up.  ","version":null,"tagName":"h3"},{"title":"onEntered​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#onEntered","content":"&lt;/&gt; Zoner.onEntered( group: Groups, callback: function ) → () --parts internally registered to the &quot;Players&quot; group overwrite the callback data to pass the respective Player object instead of the characters' HumanoidRootPart Zoner.onEntered(&quot;Players&quot;, function(player) print(player.Name .. &quot; entered a zone!&quot;) end)   ","version":null,"tagName":"h3"},{"title":"onExited​","type":1,"pageTitle":"Zoner","url":"/Zoner/api/Zoner#onExited","content":"&lt;/&gt; Zoner.onExited( group: Groups, callback: function ) → () --parts internally registered to the &quot;Players&quot; group overwrite the callback data to pass the respective Player object instead of the characters' HumanoidRootPart Zoner.onExited(&quot;Players&quot;, function(player) print(player.Name .. &quot; exited a zone!&quot;) end)  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}