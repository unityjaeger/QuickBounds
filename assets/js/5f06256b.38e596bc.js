"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[519],{3275:e=>{e.exports=JSON.parse('{"functions":[{"name":"add","desc":"Start tracking the specified BasePart.","params":[{"name":"part","desc":"","lua_type":"BasePart"},{"name":"customData","desc":"","lua_type":"any?"}],"returns":[],"function_type":"method","source":{"line":50,"path":"src/moonwave.luau"}},{"name":"remove","desc":"Makes the group stop tracking the specified BasePart.","params":[{"name":"part","desc":"","lua_type":"BasePart"}],"returns":[],"function_type":"method","source":{"line":57,"path":"src/moonwave.luau"}},{"name":"setPriority","desc":"Groups with the same priority can be entered by a part that is a member of both groups simultaneously.\\nIf the groups have a different priority then the one with a lower priority will win.","params":[{"name":"priority","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":65,"path":"src/moonwave.luau"}},{"name":"onEntered","desc":"Tracks whenever a BasePart that is part of this group enters this group through a Zone with the use of a callback function, returns a cleanup function. ","params":[{"name":"callback","desc":"","lua_type":"(part: BasePart, zone: Zone, customData: any?) -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":73,"path":"src/moonwave.luau"}},{"name":"onExited","desc":"Tracks whenever a BasePart that is part of this group exits this group through a Zone with the use of a callback function, returns a cleanup function. ","params":[{"name":"callback","desc":"","lua_type":"(part: BasePart, zone: Zone, customData: any?) -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":81,"path":"src/moonwave.luau"}}],"properties":[{"name":"UID","desc":"Unique identifier for this group.","lua_type":"number","source":{"line":87,"path":"src/moonwave.luau"}}],"types":[],"name":"Group","desc":"","source":{"line":42,"path":"src/moonwave.luau"}}')}}]);