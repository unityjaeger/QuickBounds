"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[571],{1919:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"Usage","title":"Usage","description":"Creating a Zone","source":"@site/docs/Usage.md","sourceDirName":".","slug":"/Usage","permalink":"/Zoner/docs/Usage","draft":false,"unlisted":false,"editUrl":"https://github.com/unityjaeger/Zoner/edit/main/docs/Usage.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Intro","permalink":"/Zoner/docs/intro"}}');var o=t(4848),i=t(8453);const r={sidebar_position:2},s="Usage",d={},l=[{value:"Creating a Zone",id:"creating-a-zone",level:2},{value:"Managing Objects",id:"managing-objects",level:2},{value:"Rebuilding",id:"rebuilding",level:3},{value:"Detecting Zone Entry/Exit",id:"detecting-zone-entryexit",level:2},{value:"Frame Budget",id:"frame-budget",level:2},{value:"Additional Information",id:"additional-information",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"usage",children:"Usage"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-zone",children:"Creating a Zone"}),"\n",(0,o.jsx)(n.p,{children:"Zones can be created in two ways, either using addFromInstance or just add, addFromInstance gets the shape of the Instance passed to the function and calls add behind the scenes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local cubeZone = zoner.add(CFrame.new(0, 10, 0), Vector3.new(10, 10, 10), "Cube")\r\n\r\nlocal sphereZone = zoner.addFromInstance(workspace.SphereZone)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"managing-objects",children:"Managing Objects"}),"\n",(0,o.jsx)(n.p,{children:"Objects can be added with assignToGroup."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'zoner.assignToGroup("Example", workspace.Part)\n'})}),"\n",(0,o.jsx)(n.p,{children:"The objects added this way automatically get cleaned up when the object is destroyed, however you can still manually remove an object from a group."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'zoner.removeFromGroup("Example", workspace.Part)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Objects can also be part of multiple groups, which just requires additional calls to the assignToGroup function. assignToGroup also has an optional third parameter that lets you define a custom value to return alongside the part in the callback function for onEntered and onExited. This is mainly so that associating data with parts is easier without having to maintain custom data structures. The custom data is specific to the group that the part was added to, so if you want it to have the same data for every group you would need to call the function with your custom data each time."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'zoner.assignToGroup("Example", workspace.Part, "Value") --the second parameter in the callback function will now be "Value" for this part\n'})}),"\n",(0,o.jsx)(n.h3,{id:"rebuilding",children:"Rebuilding"}),"\n",(0,o.jsx)(n.p,{children:"The BVH tree needs to be rebuilt every time a zone gets added or removed, otherwise it operates on old data. This shouldn't be done excessively but the performance cost is not too bad with a low zone count. If possible, try batching together zone removals and additions and then calling rebuild. (for reference, rebuilding a tree with 500 zones costs ~0.5ms)"}),"\n",(0,o.jsx)(n.h2,{id:"detecting-zone-entryexit",children:"Detecting Zone Entry/Exit"}),"\n",(0,o.jsx)(n.p,{children:"onEntered and onExited allow you to define any number of callbacks to listen to objects moving in or out of a zone."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'zoner.onEntered("Example", function(part, customData)\r\n    print(part, "entered zone, with data", customData) --if we take the object defined above, this will print "Part entered zone, with data Value"\r\nend)\r\n\r\nzoner.onExited("Example", function(part)\r\n    print(part, "exited zone")\r\nend)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"frame-budget",children:"Frame Budget"}),"\n",(0,o.jsx)(n.p,{children:"You can define the maximum frame time that the module will use up per frame to process zones. The time is passed in milliseconds and the default time is 0.25 milliseconds."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"zoner.setFrameBudgetMs(1) --1 millisecond\n"})}),"\n",(0,o.jsx)(n.h2,{id:"additional-information",children:"Additional Information"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Only having one Zone per tag is completely fine."}),"\n",(0,o.jsx)(n.li,{children:"This module can handle querying a lot of zones, but it is always a trade off if you want optimal performance, either a lot of objects or a lot of zones."}),"\n",(0,o.jsx)(n.li,{children:'There is a predefined "Players" group that gets handled by the module.'}),"\n",(0,o.jsx)(n.li,{children:"Parts only get their center checked against the zones for optimization."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);