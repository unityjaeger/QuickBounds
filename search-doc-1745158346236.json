{"searchDocs":[{"title":"Intro","type":0,"sectionRef":"#","url":"/Zoner/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Intro","url":"/Zoner/docs/intro#overview","content":" QuickBounds is a spatial partitioning system for Roblox that efficiently detects when objects enter or exit defined zones. It uses a Bounding Volume Hierarchy with Morton Codes for optimized spatial queries, making it suitable for large-scale applications.  ","version":"Next","tagName":"h2"},{"title":"Quick Start​","type":1,"pageTitle":"Intro","url":"/Zoner/docs/intro#quick-start","content":" --create a zone local zone = QuickBounds.addFromInstance(workspace.MyZonePart) zone.watchGroups(&quot;Players&quot;) --make this zone watch any object with the &quot;Players&quot; group QuickBounds.onEntered(&quot;Players&quot;, function(player) print(player.Name .. &quot; entered the zone!&quot;) end) QuickBounds.onExited(&quot;Players&quot;, function(player) print(player.Name .. &quot; exited the zone!&quot;) end) --rebuild the BVH tree, needed after structural changes QuickBounds.rebuild()  ","version":"Next","tagName":"h2"},{"title":"Zone","type":0,"sectionRef":"#","url":"/Zoner/api/Zone","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#functions","content":" ","version":null,"tagName":"h2"},{"title":"remove​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#remove","content":"&lt;/&gt; Zone:remove() → () Removes the Zone from the BVH, requires a rebuild for the effect to show.  ","version":null,"tagName":"h3"},{"title":"watchGroups​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#watchGroups","content":"&lt;/&gt; Zone:watchGroups(...: Groups) → () zone:watchGroups(&quot;Players&quot;, &quot;NPCs&quot;, &quot;Vehicles&quot;)   ","version":null,"tagName":"h3"},{"title":"unwatchGroups​","type":1,"pageTitle":"Zone","url":"/Zoner/api/Zone#unwatchGroups","content":"&lt;/&gt; Zone:unwatchGroups(...: Groups) → () zone:unwatchGroups(&quot;Vehicles&quot;)  ","version":null,"tagName":"h3"},{"title":"Usage","type":0,"sectionRef":"#","url":"/Zoner/docs/Usage","content":"","keywords":"","version":"Next"},{"title":"Creating a Zone​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#creating-a-zone","content":" Zones can be created in two ways, either using addFromInstance or just add, addFromInstance gets the shape of the Instance passed to the function and calls add behind the scenes.  local cubeZone = QuickBounds.add(CFrame.new(0, 10, 0), Vector3.new(10, 10, 10), &quot;Cube&quot;) local sphereZone = QuickBounds.addFromInstance(workspace.SphereZone)   ","version":"Next","tagName":"h2"},{"title":"Managing Objects​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#managing-objects","content":" Objects can be added with assignToGroup.  QuickBounds.assignToGroup(&quot;Example&quot;, workspace.Part)   The objects added this way automatically get cleaned up when the object is destroyed, however you can still manually remove an object from a group.  QuickBounds.removeFromGroup(&quot;Example&quot;, workspace.Part)   Objects can also be part of multiple groups, which just requires additional calls to the assignToGroup function. assignToGroup also has an optional third parameter that lets you define a custom value to return alongside the part in the callback function for onEntered and onExited. This is mainly so that associating data with parts is easier without having to maintain custom data structures. The custom data is specific to the group that the part was added to, so if you want it to have the same data for every group you would need to call the function with your custom data each time.  QuickBounds.assignToGroup(&quot;Example&quot;, workspace.Part, &quot;Value&quot;) --the second parameter in the callback function will now be &quot;Value&quot; for this part   ","version":"Next","tagName":"h2"},{"title":"Rebuilding​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#rebuilding","content":" The BVH tree needs to be rebuilt every time a zone gets added or removed, otherwise it operates on old data. This shouldn't be done excessively but the performance cost is not too bad with a low zone count. If possible, try batching together zone removals and additions and then calling rebuild. (for reference, rebuilding a tree with 500 zones costs ~0.5ms)  ","version":"Next","tagName":"h3"},{"title":"Detecting Zone Entry/Exit​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#detecting-zone-entryexit","content":" onEntered and onExited allow you to define any number of callbacks to listen to objects moving in or out of a zone.  QuickBounds.onEntered(&quot;Example&quot;, function(part, customData) print(part, &quot;entered zone, with data&quot;, customData) --if we take the object defined above, this will print &quot;Part entered zone, with data Value&quot; end) QuickBounds.onExited(&quot;Example&quot;, function(part) print(part, &quot;exited zone&quot;) end)   ","version":"Next","tagName":"h2"},{"title":"Frame Budget​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#frame-budget","content":" You can define the maximum frame time that the module will use up per frame to process zones. The time is passed in milliseconds and the default time is 0.2 milliseconds. This frame budget ONLY cares about the checking of which zone a part is in, and does not include the time your callbacks take to run. As such, it is recommended to keep it at a low number, like the default 0.2 milliseconds.  QuickBounds.setFrameBudgetMs(1) --1 millisecond   ","version":"Next","tagName":"h2"},{"title":"Additional Information​","type":1,"pageTitle":"Usage","url":"/Zoner/docs/Usage#additional-information","content":" Only having one Zone per tag is completely fine.This module can handle querying a lot of zones, but it is always a trade off if you want optimal performance, either a lot of objects or a lot of zones.There is a predefined &quot;Players&quot; group that gets handled by the module.Parts only get their center checked against the zones for optimization. ","version":"Next","tagName":"h2"},{"title":"QuickBounds","type":0,"sectionRef":"#","url":"/Zoner/api/QuickBounds","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#types","content":" ","version":null,"tagName":"h2"},{"title":"Groups​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#Groups","content":"&lt;/&gt; type Groups = &quot;Players&quot; | string  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#functions","content":" ","version":null,"tagName":"h2"},{"title":"add​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#add","content":"&lt;/&gt; QuickBounds.add( cframe: CFrame , size: Vector3 , shape: &quot;Cube&quot; | &quot;Cylinder&quot; | &quot;Sphere&quot; ) → Zone Requires a rebuild for the zone to start working as intended.  ","version":null,"tagName":"h3"},{"title":"addFromInstance​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#addFromInstance","content":"&lt;/&gt; QuickBounds.addFromInstance(part: BasePart ) → Zone Requires a rebuild for the zone to start working as intended.  ","version":null,"tagName":"h3"},{"title":"rebuild​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#rebuild","content":"&lt;/&gt; QuickBounds.rebuild() → () Reconstructs the BVH based on the current zones, this is required after any structural change.  ","version":null,"tagName":"h3"},{"title":"assignToGroup​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#assignToGroup","content":"&lt;/&gt; QuickBounds.assignToGroup( group: string, part: BasePart , callbackData: any?-- optional data to pass to callbacks ) → () Associates a BasePart with a group, if callbackData is specified, then it is specific to that group.  ","version":null,"tagName":"h3"},{"title":"removeFromGroup​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#removeFromGroup","content":"&lt;/&gt; QuickBounds.removeFromGroup( group: string, part: BasePart ) → () Removes a BasePart from a group, if the BasePart is not a member of any group after this operation, it gets cleaned up.  ","version":null,"tagName":"h3"},{"title":"onEntered​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#onEntered","content":"&lt;/&gt; QuickBounds.onEntered( group: Groups, callback: function ) → () --parts internally registered to the &quot;Players&quot; group pass the Player object as the second argument in the callback QuickBounds.onEntered(&quot;Players&quot;, function(_, player) print(player.Name .. &quot; entered a zone!&quot;) end)   ","version":null,"tagName":"h3"},{"title":"onExited​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#onExited","content":"&lt;/&gt; QuickBounds.onExited( group: Groups, callback: function ) → () --parts internally registered to the &quot;Players&quot; group pass the Player object as the second argument in the callback QuickBounds.onExited(&quot;Players&quot;, function(_, player) print(player.Name .. &quot; exited a zone!&quot;) end)   ","version":null,"tagName":"h3"},{"title":"setFrameBudgetMs​","type":1,"pageTitle":"QuickBounds","url":"/Zoner/api/QuickBounds#setFrameBudgetMs","content":"&lt;/&gt; QuickBounds.setFrameBudgetMs(budget: number) → () Set the target frame budget in milliseconds. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}